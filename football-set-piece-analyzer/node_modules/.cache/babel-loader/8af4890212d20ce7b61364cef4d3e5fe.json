{"ast":null,"code":"/**\n * Draw a football pitch on a canvas element\n * @param {HTMLCanvasElement} canvas - The canvas element to draw on\n * @param {Object} options - Customization options\n */\nexport const drawPitch = (canvas, options = {}) => {\n  const ctx = canvas.getContext('2d');\n  const width = canvas.width;\n  const height = canvas.height;\n\n  // Default options\n  const defaultOptions = {\n    pitchColor: '#4CAF50',\n    lineColor: '#FFFFFF',\n    goalColor: '#FFFFFF',\n    showPenaltyBoxes: true,\n    showCenterCircle: true,\n    showCornerArcs: true\n  };\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // Clear canvas\n  ctx.clearRect(0, 0, width, height);\n\n  // Draw pitch background\n  ctx.fillStyle = opts.pitchColor;\n  ctx.fillRect(0, 0, width, height);\n\n  // Set line style\n  ctx.strokeStyle = opts.lineColor;\n  ctx.lineWidth = 2;\n\n  // Draw pitch outline\n  ctx.strokeRect(width * 0.05, height * 0.05, width * 0.9, height * 0.9);\n\n  // Draw halfway line\n  ctx.beginPath();\n  ctx.moveTo(width * 0.05, height * 0.5);\n  ctx.lineTo(width * 0.95, height * 0.5);\n  ctx.stroke();\n\n  // Draw center circle\n  if (opts.showCenterCircle) {\n    ctx.beginPath();\n    ctx.arc(width * 0.5, height * 0.5, width * 0.1, 0, Math.PI * 2);\n    ctx.stroke();\n\n    // Center spot\n    ctx.beginPath();\n    ctx.arc(width * 0.5, height * 0.5, 3, 0, Math.PI * 2);\n    ctx.fillStyle = opts.lineColor;\n    ctx.fill();\n  }\n\n  // Draw penalty boxes\n  if (opts.showPenaltyBoxes) {\n    // Top penalty box (larger)\n    ctx.strokeRect(width * 0.3, height * 0.05, width * 0.4, height * 0.2);\n\n    // Top goal box (smaller)\n    ctx.strokeRect(width * 0.4, height * 0.05, width * 0.2, height * 0.1);\n\n    // Bottom penalty box (larger)\n    ctx.strokeRect(width * 0.3, height * 0.75, width * 0.4, height * 0.2);\n\n    // Bottom goal box (smaller)\n    ctx.strokeRect(width * 0.4, height * 0.85, width * 0.2, height * 0.1);\n\n    // Penalty spots\n    ctx.beginPath();\n    ctx.arc(width * 0.5, height * 0.2, 3, 0, Math.PI * 2);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(width * 0.5, height * 0.8, 3, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  // Draw goals\n  ctx.fillStyle = opts.goalColor;\n\n  // Top goal\n  ctx.fillRect(width * 0.45, height * 0.04, width * 0.1, height * 0.01);\n\n  // Bottom goal\n  ctx.fillRect(width * 0.45, height * 0.95, width * 0.1, height * 0.01);\n\n  // Draw corner arcs\n  if (opts.showCornerArcs) {\n    // Top left\n    ctx.beginPath();\n    ctx.arc(width * 0.05, height * 0.05, width * 0.02, 0, Math.PI / 2);\n    ctx.stroke();\n\n    // Top right\n    ctx.beginPath();\n    ctx.arc(width * 0.95, height * 0.05, width * 0.02, Math.PI / 2, Math.PI);\n    ctx.stroke();\n\n    // Bottom left\n    ctx.beginPath();\n    ctx.arc(width * 0.05, height * 0.95, width * 0.02, 3 * Math.PI / 2, 2 * Math.PI);\n    ctx.stroke();\n\n    // Bottom right\n    ctx.beginPath();\n    ctx.arc(width * 0.95, height * 0.95, width * 0.02, Math.PI, 3 * Math.PI / 2);\n    ctx.stroke();\n  }\n};\n\n/**\n * Draw a point on the pitch to represent a set piece location\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Object} coordinates - {x, y} coordinates (0-100 scale)\n * @param {Object} options - Customization options\n */\nexport const drawSetPieceLocation = (canvas, coordinates, options = {}) => {\n  const ctx = canvas.getContext('2d');\n  const width = canvas.width;\n  const height = canvas.height;\n\n  // Convert coordinates from 0-100 scale to canvas scale\n  const x = coordinates.x / 100 * width;\n  const y = coordinates.y / 100 * height;\n\n  // Default options\n  const defaultOptions = {\n    color: '#FF0000',\n    radius: 5\n  };\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // Draw the point\n  ctx.beginPath();\n  ctx.arc(x, y, opts.radius, 0, Math.PI * 2);\n  ctx.fillStyle = opts.color;\n  ctx.fill();\n};\n\n/**\n * Draw a player on the pitch\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Object} coordinates - {x, y} coordinates (0-100 scale)\n * @param {Object} player - Player information\n * @param {Object} options - Customization options\n */\nexport const drawPlayer = (canvas, coordinates, player, options = {}) => {\n  const ctx = canvas.getContext('2d');\n  const width = canvas.width;\n  const height = canvas.height;\n\n  // Convert coordinates from 0-100 scale to canvas scale\n  const x = coordinates.x / 100 * width;\n  const y = coordinates.y / 100 * height;\n\n  // Default options\n  const defaultOptions = {\n    color: '#3F51B5',\n    radius: 10,\n    showName: true,\n    nameColor: '#FFFFFF'\n  };\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // Draw the player circle\n  ctx.beginPath();\n  ctx.arc(x, y, opts.radius, 0, Math.PI * 2);\n  ctx.fillStyle = opts.color;\n  ctx.fill();\n\n  // Draw player number or initials\n  if (player.number) {\n    ctx.fillStyle = opts.nameColor;\n    ctx.font = 'bold 10px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(player.number, x, y);\n  } else if (player.name) {\n    const initials = player.name.split(' ').map(n => n[0]).join('');\n    ctx.fillStyle = opts.nameColor;\n    ctx.font = 'bold 10px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(initials, x, y);\n  }\n\n  // Show player name if enabled\n  if (opts.showName && player.name) {\n    ctx.fillStyle = '#000000';\n    ctx.font = '10px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    ctx.fillText(player.name, x, y + opts.radius + 5);\n  }\n};\n\n/**\n * Draw a trajectory line on the pitch\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Object} start - Starting {x, y} coordinates (0-100 scale)\n * @param {Object} end - Ending {x, y} coordinates (0-100 scale)\n * @param {String} type - Type of trajectory ('straight', 'curved', 'inswinger', 'outswinger')\n * @param {Object} options - Customization options\n */\nexport const drawTrajectory = (canvas, start, end, type = 'straight', options = {}) => {\n  const ctx = canvas.getContext('2d');\n  const width = canvas.width;\n  const height = canvas.height;\n\n  // Convert coordinates from 0-100 scale to canvas scale\n  const startX = start.x / 100 * width;\n  const startY = start.y / 100 * height;\n  const endX = end.x / 100 * width;\n  const endY = end.y / 100 * height;\n\n  // Default options\n  const defaultOptions = {\n    color: '#FF9800',\n    width: 2,\n    dashed: false\n  };\n  const opts = {\n    ...defaultOptions,\n    ...options\n  };\n\n  // Set line style\n  ctx.strokeStyle = opts.color;\n  ctx.lineWidth = opts.width;\n  if (opts.dashed) {\n    ctx.setLineDash([5, 3]);\n  } else {\n    ctx.setLineDash([]);\n  }\n\n  // Draw the trajectory\n  ctx.beginPath();\n  if (type === 'straight') {\n    // Straight line\n    ctx.moveTo(startX, startY);\n    ctx.lineTo(endX, endY);\n  } else if (type === 'curved' || type === 'inswinger' || type === 'outswinger') {\n    const controlPoint = {\n      x: 0,\n      y: 0\n    };\n\n    // For inswingers and outswingers, adjust the control point\n    if (type === 'inswinger') {\n      // Control point is to the \"inside\" of the path\n      controlPoint.x = (startX + endX) / 2 - (endY - startY) * 0.5;\n      controlPoint.y = (startY + endY) / 2 + (endX - startX) * 0.5;\n    } else if (type === 'outswinger') {\n      // Control point is to the \"outside\" of the path\n      controlPoint.x = (startX + endX) / 2 + (endY - startY) * 0.5;\n      controlPoint.y = (startY + endY) / 2 - (endX - startX) * 0.5;\n    } else {\n      // Generic curved line\n      controlPoint.x = (startX + endX) / 2;\n      controlPoint.y = Math.min(startY, endY) - Math.abs(endX - startX) * 0.3;\n    }\n    ctx.moveTo(startX, startY);\n    ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, endX, endY);\n  }\n  ctx.stroke();\n  ctx.setLineDash([]);\n};","map":{"version":3,"names":["drawPitch","canvas","options","ctx","getContext","width","height","defaultOptions","pitchColor","lineColor","goalColor","showPenaltyBoxes","showCenterCircle","showCornerArcs","opts","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","beginPath","moveTo","lineTo","stroke","arc","Math","PI","fill","drawSetPieceLocation","coordinates","x","y","color","radius","drawPlayer","player","showName","nameColor","number","font","textAlign","textBaseline","fillText","name","initials","split","map","n","join","drawTrajectory","start","end","type","startX","startY","endX","endY","dashed","setLineDash","controlPoint","min","abs","quadraticCurveTo"],"sources":["C:/Users/Giridharan U/Desktop/tacti-kick/football-set-piece-analyzer/src/utils/visualization.js"],"sourcesContent":["/**\n * Draw a football pitch on a canvas element\n * @param {HTMLCanvasElement} canvas - The canvas element to draw on\n * @param {Object} options - Customization options\n */\nexport const drawPitch = (canvas, options = {}) => {\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Default options\n    const defaultOptions = {\n        pitchColor: '#4CAF50',\n        lineColor: '#FFFFFF',\n        goalColor: '#FFFFFF',\n        showPenaltyBoxes: true,\n        showCenterCircle: true,\n        showCornerArcs: true\n    };\n    \n    const opts = { ...defaultOptions, ...options };\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Draw pitch background\n    ctx.fillStyle = opts.pitchColor;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Set line style\n    ctx.strokeStyle = opts.lineColor;\n    ctx.lineWidth = 2;\n    \n    // Draw pitch outline\n    ctx.strokeRect(width * 0.05, height * 0.05, width * 0.9, height * 0.9);\n    \n    // Draw halfway line\n    ctx.beginPath();\n    ctx.moveTo(width * 0.05, height * 0.5);\n    ctx.lineTo(width * 0.95, height * 0.5);\n    ctx.stroke();\n    \n    // Draw center circle\n    if (opts.showCenterCircle) {\n        ctx.beginPath();\n        ctx.arc(width * 0.5, height * 0.5, width * 0.1, 0, Math.PI * 2);\n        ctx.stroke();\n        \n        // Center spot\n        ctx.beginPath();\n        ctx.arc(width * 0.5, height * 0.5, 3, 0, Math.PI * 2);\n        ctx.fillStyle = opts.lineColor;\n        ctx.fill();\n    }\n    \n    // Draw penalty boxes\n    if (opts.showPenaltyBoxes) {\n        // Top penalty box (larger)\n        ctx.strokeRect(\n            width * 0.3, \n            height * 0.05, \n            width * 0.4, \n            height * 0.2\n        );\n        \n        // Top goal box (smaller)\n        ctx.strokeRect(\n            width * 0.4, \n            height * 0.05, \n            width * 0.2, \n            height * 0.1\n        );\n        \n        // Bottom penalty box (larger)\n        ctx.strokeRect(\n            width * 0.3, \n            height * 0.75, \n            width * 0.4, \n            height * 0.2\n        );\n        \n        // Bottom goal box (smaller)\n        ctx.strokeRect(\n            width * 0.4, \n            height * 0.85, \n            width * 0.2, \n            height * 0.1\n        );\n        \n        // Penalty spots\n        ctx.beginPath();\n        ctx.arc(width * 0.5, height * 0.2, 3, 0, Math.PI * 2);\n        ctx.fill();\n        \n        ctx.beginPath();\n        ctx.arc(width * 0.5, height * 0.8, 3, 0, Math.PI * 2);\n        ctx.fill();\n    }\n    \n    // Draw goals\n    ctx.fillStyle = opts.goalColor;\n    \n    // Top goal\n    ctx.fillRect(width * 0.45, height * 0.04, width * 0.1, height * 0.01);\n    \n    // Bottom goal\n    ctx.fillRect(width * 0.45, height * 0.95, width * 0.1, height * 0.01);\n    \n    // Draw corner arcs\n    if (opts.showCornerArcs) {\n        // Top left\n        ctx.beginPath();\n        ctx.arc(width * 0.05, height * 0.05, width * 0.02, 0, Math.PI / 2);\n        ctx.stroke();\n        \n        // Top right\n        ctx.beginPath();\n        ctx.arc(width * 0.95, height * 0.05, width * 0.02, Math.PI / 2, Math.PI);\n        ctx.stroke();\n        \n        // Bottom left\n        ctx.beginPath();\n        ctx.arc(width * 0.05, height * 0.95, width * 0.02, 3 * Math.PI / 2, 2 * Math.PI);\n        ctx.stroke();\n        \n        // Bottom right\n        ctx.beginPath();\n        ctx.arc(width * 0.95, height * 0.95, width * 0.02, Math.PI, 3 * Math.PI / 2);\n        ctx.stroke();\n    }\n};\n\n/**\n * Draw a point on the pitch to represent a set piece location\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Object} coordinates - {x, y} coordinates (0-100 scale)\n * @param {Object} options - Customization options\n */\nexport const drawSetPieceLocation = (canvas, coordinates, options = {}) => {\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Convert coordinates from 0-100 scale to canvas scale\n    const x = (coordinates.x / 100) * width;\n    const y = (coordinates.y / 100) * height;\n    \n    // Default options\n    const defaultOptions = {\n        color: '#FF0000',\n        radius: 5\n    };\n    \n    const opts = { ...defaultOptions, ...options };\n    \n    // Draw the point\n    ctx.beginPath();\n    ctx.arc(x, y, opts.radius, 0, Math.PI * 2);\n    ctx.fillStyle = opts.color;\n    ctx.fill();\n};\n\n/**\n * Draw a player on the pitch\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Object} coordinates - {x, y} coordinates (0-100 scale)\n * @param {Object} player - Player information\n * @param {Object} options - Customization options\n */\nexport const drawPlayer = (canvas, coordinates, player, options = {}) => {\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Convert coordinates from 0-100 scale to canvas scale\n    const x = (coordinates.x / 100) * width;\n    const y = (coordinates.y / 100) * height;\n    \n    // Default options\n    const defaultOptions = {\n        color: '#3F51B5',\n        radius: 10,\n        showName: true,\n        nameColor: '#FFFFFF'\n    };\n    \n    const opts = { ...defaultOptions, ...options };\n    \n    // Draw the player circle\n    ctx.beginPath();\n    ctx.arc(x, y, opts.radius, 0, Math.PI * 2);\n    ctx.fillStyle = opts.color;\n    ctx.fill();\n    \n    // Draw player number or initials\n    if (player.number) {\n        ctx.fillStyle = opts.nameColor;\n        ctx.font = 'bold 10px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(player.number, x, y);\n    } else if (player.name) {\n        const initials = player.name.split(' ').map(n => n[0]).join('');\n        ctx.fillStyle = opts.nameColor;\n        ctx.font = 'bold 10px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(initials, x, y);\n    }\n    \n    // Show player name if enabled\n    if (opts.showName && player.name) {\n        ctx.fillStyle = '#000000';\n        ctx.font = '10px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'top';\n        ctx.fillText(player.name, x, y + opts.radius + 5);\n    }\n};\n\n/**\n * Draw a trajectory line on the pitch\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Object} start - Starting {x, y} coordinates (0-100 scale)\n * @param {Object} end - Ending {x, y} coordinates (0-100 scale)\n * @param {String} type - Type of trajectory ('straight', 'curved', 'inswinger', 'outswinger')\n * @param {Object} options - Customization options\n */\nexport const drawTrajectory = (canvas, start, end, type = 'straight', options = {}) => {\n    const ctx = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    \n    // Convert coordinates from 0-100 scale to canvas scale\n    const startX = (start.x / 100) * width;\n    const startY = (start.y / 100) * height;\n    const endX = (end.x / 100) * width;\n    const endY = (end.y / 100) * height;\n    \n    // Default options\n    const defaultOptions = {\n        color: '#FF9800',\n        width: 2,\n        dashed: false\n    };\n    \n    const opts = { ...defaultOptions, ...options };\n    \n    // Set line style\n    ctx.strokeStyle = opts.color;\n    ctx.lineWidth = opts.width;\n    \n    if (opts.dashed) {\n        ctx.setLineDash([5, 3]);\n    } else {\n        ctx.setLineDash([]);\n    }\n    \n    // Draw the trajectory\n    ctx.beginPath();\n    \n    if (type === 'straight') {\n        // Straight line\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n    } else if (type === 'curved' || type === 'inswinger' || type === 'outswinger') {\n        const controlPoint = { x: 0, y: 0 };\n        \n        // For inswingers and outswingers, adjust the control point\n        if (type === 'inswinger') {\n            // Control point is to the \"inside\" of the path\n            controlPoint.x = (startX + endX) / 2 - (endY - startY) * 0.5;\n            controlPoint.y = (startY + endY) / 2 + (endX - startX) * 0.5;\n        } else if (type === 'outswinger') {\n            // Control point is to the \"outside\" of the path\n            controlPoint.x = (startX + endX) / 2 + (endY - startY) * 0.5;\n            controlPoint.y = (startY + endY) / 2 - (endX - startX) * 0.5;\n        } else {\n            // Generic curved line\n            controlPoint.x = (startX + endX) / 2;\n            controlPoint.y = Math.min(startY, endY) - Math.abs(endX - startX) * 0.3;\n        }\n        \n        ctx.moveTo(startX, startY);\n        ctx.quadraticCurveTo(controlPoint.x, controlPoint.y, endX, endY);\n    }\n    \n    ctx.stroke();\n    ctx.setLineDash([]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
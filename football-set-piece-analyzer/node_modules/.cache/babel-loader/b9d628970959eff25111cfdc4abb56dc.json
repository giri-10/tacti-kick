{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Giridharan U\\\\Desktop\\\\tacti-kick\\\\football-set-piece-analyzer\\\\src\\\\components\\\\PitchVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { drawPitch, drawSetPieceLocation, drawTrajectory, drawPlayer } from '../utils/visualization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PitchVisualization = ({\n  onSetPieceSelect,\n  recommendation\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [clickPosition, setClickPosition] = useState(null);\n\n  // Initialize the pitch visualization\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      // Make the canvas responsive\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n\n      // Draw the initial pitch\n      drawPitch(canvas);\n    }\n  }, []);\n\n  // Update visualization when recommendation changes\n  useEffect(() => {\n    if (!canvasRef.current || !clickPosition) return;\n    const canvas = canvasRef.current;\n\n    // Redraw the pitch\n    drawPitch(canvas);\n\n    // Draw the set piece location\n    drawSetPieceLocation(canvas, clickPosition);\n\n    // Draw the recommendation visualization if available\n    if (recommendation) {\n      visualizeRecommendation(canvas, clickPosition, recommendation);\n    }\n  }, [clickPosition, recommendation]);\n\n  // Handle canvas click\n  const handleCanvasClick = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n\n    // Get click position relative to canvas\n    const x = (e.clientX - rect.left) / canvas.width * 100;\n    const y = (e.clientY - rect.top) / canvas.height * 100;\n\n    // Update click position\n    setClickPosition({\n      x,\n      y\n    });\n\n    // Notify parent component\n    if (onSetPieceSelect) {\n      onSetPieceSelect({\n        x,\n        y\n      });\n    }\n  };\n\n  // Visualize the recommendation\n  const visualizeRecommendation = (canvas, position, recommendation) => {\n    if (!recommendation) return;\n    const {\n      type,\n      taker,\n      deliveryType\n    } = recommendation;\n    if (type === 'corner') {\n      // For corners, visualize the corner taker and trajectory\n      const {\n        targetZone,\n        targetPlayers,\n        cornerType\n      } = recommendation;\n\n      // Draw the taker\n      const takerPosition = cornerType === 'left' ? {\n        x: 5,\n        y: position.y\n      } : {\n        x: 95,\n        y: position.y\n      };\n      drawPlayer(canvas, takerPosition, taker, {\n        color: '#2196F3'\n      });\n\n      // Determine target position based on zone\n      let targetPosition;\n      switch (targetZone.id) {\n        case 'nearPost':\n          targetPosition = {\n            x: 45,\n            y: 10\n          };\n          break;\n        case 'farPost':\n          targetPosition = {\n            x: 55,\n            y: 10\n          };\n          break;\n        case 'centerGoal':\n          targetPosition = {\n            x: 50,\n            y: 10\n          };\n          break;\n        case 'penalty':\n          targetPosition = {\n            x: 50,\n            y: 18\n          };\n          break;\n        case 'edge':\n          targetPosition = {\n            x: 50,\n            y: 25\n          };\n          break;\n        default:\n          targetPosition = {\n            x: 50,\n            y: 15\n          };\n      }\n\n      // Draw trajectory\n      const trajectoryType = deliveryType.id.toLowerCase();\n      drawTrajectory(canvas, takerPosition, targetPosition, trajectoryType, {\n        color: '#FF9800'\n      });\n\n      // Draw target players\n      targetPlayers.forEach((player, index) => {\n        // Spread target players around the target position\n        const offset = index - (targetPlayers.length - 1) / 2;\n        const playerPos = {\n          x: targetPosition.x + offset * 5,\n          y: targetPosition.y + offset * 3\n        };\n        drawPlayer(canvas, playerPos, player, {\n          color: '#4CAF50'\n        });\n      });\n    } else if (type === 'freeKick') {\n      // For free kicks, visualize the taker and trajectory\n      const {\n        zone,\n        isDirect,\n        targetPlayers\n      } = recommendation;\n\n      // Draw the taker\n      drawPlayer(canvas, position, taker, {\n        color: '#2196F3'\n      });\n      if (isDirect) {\n        // Direct free kick - draw trajectory to goal\n        drawTrajectory(canvas, position, {\n          x: 50,\n          y: 5\n        }, 'curved', {\n          color: '#FF9800'\n        });\n      } else {\n        // Crossed free kick - draw trajectory to target area\n        // Determine target position based on free kick position\n        const isLeftSide = position.x < 50;\n        const targetPosition = isLeftSide ? {\n          x: 60,\n          y: 15\n        } : {\n          x: 40,\n          y: 15\n        };\n\n        // Draw trajectory\n        const trajectoryType = deliveryType.id.toLowerCase().includes('in') ? 'inswinger' : 'outswinger';\n        drawTrajectory(canvas, position, targetPosition, trajectoryType, {\n          color: '#FF9800'\n        });\n\n        // Draw target players\n        targetPlayers.forEach((player, index) => {\n          // Spread target players around the target position\n          const offset = index - (targetPlayers.length - 1) / 2;\n          const playerPos = {\n            x: targetPosition.x + offset * 5,\n            y: targetPosition.y + offset * 3\n          };\n          drawPlayer(canvas, playerPos, player, {\n            color: '#4CAF50'\n          });\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pitch-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      onClick: handleCanvasClick,\n      className: \"pitch-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pitch-instructions\",\n      children: \"Click anywhere on the pitch to analyze set piece options\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n_s(PitchVisualization, \"ZxRh6SHZI3Rc5WkHOp+aHeqI1Ec=\");\n_c = PitchVisualization;\nexport default PitchVisualization;\nvar _c;\n$RefreshReg$(_c, \"PitchVisualization\");","map":{"version":3,"names":["React","useRef","useEffect","useState","drawPitch","drawSetPieceLocation","drawTrajectory","drawPlayer","jsxDEV","_jsxDEV","PitchVisualization","onSetPieceSelect","recommendation","_s","canvasRef","clickPosition","setClickPosition","canvas","current","width","offsetWidth","height","offsetHeight","visualizeRecommendation","handleCanvasClick","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","position","type","taker","deliveryType","targetZone","targetPlayers","cornerType","takerPosition","color","targetPosition","id","trajectoryType","toLowerCase","forEach","player","index","offset","length","playerPos","zone","isDirect","isLeftSide","includes","className","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Giridharan U/Desktop/tacti-kick/football-set-piece-analyzer/src/components/PitchVisualization.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { drawPitch, drawSetPieceLocation, drawTrajectory, drawPlayer } from '../utils/visualization';\n\nconst PitchVisualization = ({ onSetPieceSelect, recommendation }) => {\n    const canvasRef = useRef(null);\n    const [clickPosition, setClickPosition] = useState(null);\n    \n    // Initialize the pitch visualization\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            // Make the canvas responsive\n            canvas.width = canvas.offsetWidth;\n            canvas.height = canvas.offsetHeight;\n            \n            // Draw the initial pitch\n            drawPitch(canvas);\n        }\n    }, []);\n    \n    // Update visualization when recommendation changes\n    useEffect(() => {\n        if (!canvasRef.current || !clickPosition) return;\n        \n        const canvas = canvasRef.current;\n        \n        // Redraw the pitch\n        drawPitch(canvas);\n        \n        // Draw the set piece location\n        drawSetPieceLocation(canvas, clickPosition);\n        \n        // Draw the recommendation visualization if available\n        if (recommendation) {\n            visualizeRecommendation(canvas, clickPosition, recommendation);\n        }\n    }, [clickPosition, recommendation]);\n    \n    // Handle canvas click\n    const handleCanvasClick = (e) => {\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        \n        // Get click position relative to canvas\n        const x = ((e.clientX - rect.left) / canvas.width) * 100;\n        const y = ((e.clientY - rect.top) / canvas.height) * 100;\n        \n        // Update click position\n        setClickPosition({ x, y });\n        \n        // Notify parent component\n        if (onSetPieceSelect) {\n            onSetPieceSelect({ x, y });\n        }\n    };\n    \n    // Visualize the recommendation\n    const visualizeRecommendation = (canvas, position, recommendation) => {\n        if (!recommendation) return;\n        \n        const { type, taker, deliveryType } = recommendation;\n        \n        if (type === 'corner') {\n            // For corners, visualize the corner taker and trajectory\n            const { targetZone, targetPlayers, cornerType } = recommendation;\n            \n            // Draw the taker\n            const takerPosition = cornerType === 'left' \n                ? { x: 5, y: position.y } \n                : { x: 95, y: position.y };\n            \n            drawPlayer(canvas, takerPosition, taker, { color: '#2196F3' });\n            \n            // Determine target position based on zone\n            let targetPosition;\n            switch(targetZone.id) {\n                case 'nearPost':\n                    targetPosition = { x: 45, y: 10 };\n                    break;\n                case 'farPost':\n                    targetPosition = { x: 55, y: 10 };\n                    break;\n                case 'centerGoal':\n                    targetPosition = { x: 50, y: 10 };\n                    break;\n                case 'penalty':\n                    targetPosition = { x: 50, y: 18 };\n                    break;\n                case 'edge':\n                    targetPosition = { x: 50, y: 25 };\n                    break;\n                default:\n                    targetPosition = { x: 50, y: 15 };\n            }\n            \n            // Draw trajectory\n            const trajectoryType = deliveryType.id.toLowerCase();\n            drawTrajectory(canvas, takerPosition, targetPosition, trajectoryType, { color: '#FF9800' });\n            \n            // Draw target players\n            targetPlayers.forEach((player, index) => {\n                // Spread target players around the target position\n                const offset = index - (targetPlayers.length - 1) / 2;\n                const playerPos = {\n                    x: targetPosition.x + offset * 5,\n                    y: targetPosition.y + offset * 3\n                };\n                \n                drawPlayer(canvas, playerPos, player, { color: '#4CAF50' });\n            });\n        } else if (type === 'freeKick') {\n            // For free kicks, visualize the taker and trajectory\n            const { zone, isDirect, targetPlayers } = recommendation;\n            \n            // Draw the taker\n            drawPlayer(canvas, position, taker, { color: '#2196F3' });\n            \n            if (isDirect) {\n                // Direct free kick - draw trajectory to goal\n                drawTrajectory(canvas, position, { x: 50, y: 5 }, 'curved', { color: '#FF9800' });\n            } else {\n                // Crossed free kick - draw trajectory to target area\n                // Determine target position based on free kick position\n                const isLeftSide = position.x < 50;\n                const targetPosition = isLeftSide\n                    ? { x: 60, y: 15 }\n                    : { x: 40, y: 15 };\n                \n                // Draw trajectory\n                const trajectoryType = deliveryType.id.toLowerCase().includes('in') ? 'inswinger' : 'outswinger';\n                drawTrajectory(canvas, position, targetPosition, trajectoryType, { color: '#FF9800' });\n                \n                // Draw target players\n                targetPlayers.forEach((player, index) => {\n                    // Spread target players around the target position\n                    const offset = index - (targetPlayers.length - 1) / 2;\n                    const playerPos = {\n                        x: targetPosition.x + offset * 5,\n                        y: targetPosition.y + offset * 3\n                    };\n                    \n                    drawPlayer(canvas, playerPos, player, { color: '#4CAF50' });\n                });\n            }\n        }\n    };\n    \n    return (\n        <div className=\"pitch-container\">\n            <canvas \n                ref={canvasRef} \n                onClick={handleCanvasClick}\n                className=\"pitch-canvas\"\n            />\n            <div className=\"pitch-instructions\">\n                Click anywhere on the pitch to analyze set piece options\n            </div>\n        </div>\n    );\n};\n\nexport default PitchVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
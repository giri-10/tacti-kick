{"ast":null,"code":"import { players } from '../data/players';\nimport { teams } from '../data/teams';\nimport { setPieces } from '../data/setpieces';\n\n// Get all teams\nexport const getTeams = () => {\n  return teams;\n};\n\n// Get a specific team by ID\nexport const getTeamById = teamId => {\n  return teams.find(team => team.id === teamId);\n};\n\n// Get players for a specific team\nexport const getPlayersByTeamId = teamId => {\n  const team = teams.find(team => team.id === teamId);\n  if (!team) return [];\n  return team.squad.map(playerId => players.find(player => player.id === playerId)).filter(Boolean);\n};\n\n// Get a specific player by ID\nexport const getPlayerById = playerId => {\n  return players.find(player => player.id === playerId);\n};\n\n// Get all set piece data\nexport const getSetPieceData = () => {\n  return setPieces;\n};\n\n// Get corner analysis data\nexport const getCornerAnalysis = () => {\n  return setPieces.corners;\n};\n\n// Get free kick analysis data\nexport const getFreeKickAnalysis = () => {\n  return setPieces.freeKicks;\n};\n\n// Get target player analysis data\nexport const getTargetPlayers = () => {\n  return setPieces.targets;\n};\n\n// Get best set piece taker for a specific team\nexport const getBestSetPieceTaker = (teamId, setPieceType) => {\n  const teamPlayers = getPlayersByTeamId(teamId);\n  if (!teamPlayers.length) return null;\n  return teamPlayers.reduce((best, player) => {\n    if (!best || player.setPieceSuccessRate[setPieceType] > best.setPieceSuccessRate[setPieceType]) {\n      return player;\n    }\n    return best;\n  }, null);\n};\n\n// Get best target players for set pieces\nexport const getBestTargetPlayers = (teamId, zone, setPieceType) => {\n  const teamPlayers = getPlayersByTeamId(teamId);\n  if (!teamPlayers.length) return [];\n\n  // Sort by height and success rate for headers\n  return teamPlayers.sort((a, b) => {\n    // First prioritize by height for target players\n    if (a.height !== b.height) {\n      return b.height - a.height; // Taller players first\n    }\n    // Then by goals from set pieces\n    return b.goalsFromSetPieces - a.goalsFromSetPieces;\n  }).slice(0, 3); // Return top 3 target players\n};","map":{"version":3,"names":["players","teams","setPieces","getTeams","getTeamById","teamId","find","team","id","getPlayersByTeamId","squad","map","playerId","player","filter","Boolean","getPlayerById","getSetPieceData","getCornerAnalysis","corners","getFreeKickAnalysis","freeKicks","getTargetPlayers","targets","getBestSetPieceTaker","setPieceType","teamPlayers","length","reduce","best","setPieceSuccessRate","getBestTargetPlayers","zone","sort","a","b","height","goalsFromSetPieces","slice"],"sources":["C:/Users/Giridharan U/Desktop/tacti-kick/football-set-piece-analyzer/src/services/dataFetcher.js"],"sourcesContent":["import { players } from '../data/players';\nimport { teams } from '../data/teams';\nimport { setPieces } from '../data/setpieces';\n\n// Get all teams\nexport const getTeams = () => {\n    return teams;\n};\n\n// Get a specific team by ID\nexport const getTeamById = (teamId) => {\n    return teams.find(team => team.id === teamId);\n};\n\n// Get players for a specific team\nexport const getPlayersByTeamId = (teamId) => {\n    const team = teams.find(team => team.id === teamId);\n    if (!team) return [];\n    \n    return team.squad.map(playerId => \n        players.find(player => player.id === playerId)\n    ).filter(Boolean);\n};\n\n// Get a specific player by ID\nexport const getPlayerById = (playerId) => {\n    return players.find(player => player.id === playerId);\n};\n\n// Get all set piece data\nexport const getSetPieceData = () => {\n    return setPieces;\n};\n\n// Get corner analysis data\nexport const getCornerAnalysis = () => {\n    return setPieces.corners;\n};\n\n// Get free kick analysis data\nexport const getFreeKickAnalysis = () => {\n    return setPieces.freeKicks;\n};\n\n// Get target player analysis data\nexport const getTargetPlayers = () => {\n    return setPieces.targets;\n};\n\n// Get best set piece taker for a specific team\nexport const getBestSetPieceTaker = (teamId, setPieceType) => {\n    const teamPlayers = getPlayersByTeamId(teamId);\n    if (!teamPlayers.length) return null;\n\n    return teamPlayers.reduce((best, player) => {\n        if (!best || player.setPieceSuccessRate[setPieceType] > best.setPieceSuccessRate[setPieceType]) {\n            return player;\n        }\n        return best;\n    }, null);\n};\n\n// Get best target players for set pieces\nexport const getBestTargetPlayers = (teamId, zone, setPieceType) => {\n    const teamPlayers = getPlayersByTeamId(teamId);\n    if (!teamPlayers.length) return [];\n\n    // Sort by height and success rate for headers\n    return teamPlayers\n        .sort((a, b) => {\n            // First prioritize by height for target players\n            if (a.height !== b.height) {\n                return b.height - a.height; // Taller players first\n            }\n            // Then by goals from set pieces\n            return b.goalsFromSetPieces - a.goalsFromSetPieces;\n        })\n        .slice(0, 3); // Return top 3 target players\n};"],"mappings":"AAAA,SAASA,OAAO,QAAQ,iBAAiB;AACzC,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,SAAS,QAAQ,mBAAmB;;AAE7C;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC1B,OAAOF,KAAK;AAChB,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAIC,MAAM,IAAK;EACnC,OAAOJ,KAAK,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,MAAM,CAAC;AACjD,CAAC;;AAED;AACA,OAAO,MAAMI,kBAAkB,GAAIJ,MAAM,IAAK;EAC1C,MAAME,IAAI,GAAGN,KAAK,CAACK,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,MAAM,CAAC;EACnD,IAAI,CAACE,IAAI,EAAE,OAAO,EAAE;EAEpB,OAAOA,IAAI,CAACG,KAAK,CAACC,GAAG,CAACC,QAAQ,IAC1BZ,OAAO,CAACM,IAAI,CAACO,MAAM,IAAIA,MAAM,CAACL,EAAE,KAAKI,QAAQ,CACjD,CAAC,CAACE,MAAM,CAACC,OAAO,CAAC;AACrB,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAIJ,QAAQ,IAAK;EACvC,OAAOZ,OAAO,CAACM,IAAI,CAACO,MAAM,IAAIA,MAAM,CAACL,EAAE,KAAKI,QAAQ,CAAC;AACzD,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAGA,CAAA,KAAM;EACjC,OAAOf,SAAS;AACpB,CAAC;;AAED;AACA,OAAO,MAAMgB,iBAAiB,GAAGA,CAAA,KAAM;EACnC,OAAOhB,SAAS,CAACiB,OAAO;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACrC,OAAOlB,SAAS,CAACmB,SAAS;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAClC,OAAOpB,SAAS,CAACqB,OAAO;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAACnB,MAAM,EAAEoB,YAAY,KAAK;EAC1D,MAAMC,WAAW,GAAGjB,kBAAkB,CAACJ,MAAM,CAAC;EAC9C,IAAI,CAACqB,WAAW,CAACC,MAAM,EAAE,OAAO,IAAI;EAEpC,OAAOD,WAAW,CAACE,MAAM,CAAC,CAACC,IAAI,EAAEhB,MAAM,KAAK;IACxC,IAAI,CAACgB,IAAI,IAAIhB,MAAM,CAACiB,mBAAmB,CAACL,YAAY,CAAC,GAAGI,IAAI,CAACC,mBAAmB,CAACL,YAAY,CAAC,EAAE;MAC5F,OAAOZ,MAAM;IACjB;IACA,OAAOgB,IAAI;EACf,CAAC,EAAE,IAAI,CAAC;AACZ,CAAC;;AAED;AACA,OAAO,MAAME,oBAAoB,GAAGA,CAAC1B,MAAM,EAAE2B,IAAI,EAAEP,YAAY,KAAK;EAChE,MAAMC,WAAW,GAAGjB,kBAAkB,CAACJ,MAAM,CAAC;EAC9C,IAAI,CAACqB,WAAW,CAACC,MAAM,EAAE,OAAO,EAAE;;EAElC;EACA,OAAOD,WAAW,CACbO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACZ;IACA,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;MACvB,OAAOD,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC,CAAC;IAChC;IACA;IACA,OAAOD,CAAC,CAACE,kBAAkB,GAAGH,CAAC,CAACG,kBAAkB;EACtD,CAAC,CAAC,CACDC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}